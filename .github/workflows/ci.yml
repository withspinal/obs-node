name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Generate coverage report
      run: |
        echo "📊 Generating coverage report..."
        npm run test:coverage -- --reporter=text-summary
        echo "✅ Coverage report generated successfully"
    
    - name: Run lint
      run: npm run lint

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Run E2E tests with OpenAI API
      run: npm test -- tests/e2e/analytics-e2e.test.ts
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  publish:
    needs: [test, e2e-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Verify npm token environment
      run: |
        echo "Checking environment variables..."
        echo "NODE_AUTH_TOKEN exists: $([ -n "$NODE_AUTH_TOKEN" ] && echo "YES" || echo "NO")"
        echo "NODE_AUTH_TOKEN length: ${#NODE_AUTH_TOKEN}"
        echo "NODE_AUTH_TOKEN format check: $([ "${NODE_AUTH_TOKEN:0:4}" = "npm_" ] && echo "VALID" || echo "INVALID")"
        echo "npm registry: $(npm config get registry)"
    
    - name: Check npm authentication
      run: |
        echo "Checking npm authentication..."
        echo "NODE_AUTH_TOKEN length: ${#NODE_AUTH_TOKEN}"
        echo "NODE_AUTH_TOKEN starts with: ${NODE_AUTH_TOKEN:0:10}..."
        
        if [ -z "$NODE_AUTH_TOKEN" ]; then
          echo "❌ NODE_AUTH_TOKEN is not set. Please add NPM_TOKEN to GitHub secrets."
          exit 1
        fi
        echo "✅ NODE_AUTH_TOKEN is set"
        
        # Try to get npm configuration
        echo "npm config list:"
        npm config list || echo "Failed to list npm config"
        
        echo "npm whoami attempt:"
        npm whoami || {
          echo "❌ npm authentication failed. Please check your NPM_TOKEN secret."
          echo "Make sure the token has 'Read and Publish' permissions."
          echo "Token format should be: npm_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
          exit 1
        }
        echo "✅ npm authentication successful"
    
    - name: Check if version already published
      id: check_version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Checking if version $CURRENT_VERSION already exists on npm..."
        
        # Check if version already exists on npm
        if npm view spinal-obs-node@$CURRENT_VERSION version >/dev/null 2>&1; then
          echo "version_exists=true" >> $GITHUB_OUTPUT
          echo "Version $CURRENT_VERSION already exists on npm"
        else
          echo "version_exists=false" >> $GITHUB_OUTPUT
          echo "Version $CURRENT_VERSION is new and ready to publish"
        fi
    
    - name: Publish to npm
      if: steps.check_version.outputs.version_exists == 'false'
      run: |
        echo "Publishing spinal-obs-node@${{ steps.check_version.outputs.current_version }} to npm..."
        npm publish --access public
        echo "Successfully published spinal-obs-node@${{ steps.check_version.outputs.current_version }}"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Skip publish (version already exists)
      if: steps.check_version.outputs.version_exists == 'true'
      run: echo "Skipping publish - version ${{ steps.check_version.outputs.current_version }} already exists on npm"

